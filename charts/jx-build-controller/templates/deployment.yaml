apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "jx.fullname" . }}
  labels:
    app: {{ template "jx.name" . }}
    chart: {{ template "jx.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "jx.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "jx.name" . }}
        release: {{ .Release.Name }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
{{- if .Values.restartPolicy }}
      restartPolicy: {{ .Values.restartPolicy }}
{{- end }}
{{- if .Values.serviceaccount.customName }}
      serviceAccountName: {{ .Values.serviceaccount.customName }}
{{- else if .Values.serviceaccount.enabled }}
      serviceAccountName: {{ template "jx.fullname" . }}
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.command -}}
          command: {{ .Values.command }}
          {{- end }}
          {{ if .Values.args -}}
          args:
{{ toYaml .Values.args | indent 10 }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          ports:
            - name: http
              containerPort: {{ .Values.internalPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.probe.livepath }}
              port: http
          readinessProbe:
            httpGet:
              path: {{ .Values.probe.readypath }}
              port: http
          env:
          - name: JX_LOG_FORMAT
            value: "{{ .Values.log.format }}"
          - name: JX_LOG_LEVEL
            value: "{{ .Values.log.level }}"
          - name: JX_LOG_SERVICE
            value: "{{ .Values.log.service | default .Chart.Name }}"
          - name: JX_LOG_SERVICE_VERSION
            value: "{{ .Chart.Version }}"
          - name: JX_LOG_STACK_SKIP
            value: "{{ .Values.log.stackSkip }}"
          - name: GIT_SECRET_MOUNT_PATH
            value: /secrets/git
{{- range $pkey, $pval := .Values.env }}
          - name: {{ $pkey }}
            value: {{ $pval }}
{{- end }}
{{ $envFromLength := len .Values.envFrom }} {{ if ne $envFromLength 0 }}
{{- with .Values.envFrom }}
          envFrom:
          {{- toYaml . | trim | nindent 10 }}
{{- end }}
{{- else if .Values.envSecrets }}
          envFrom:
          - secretRef:
              name: jx-build-controller-env
{{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
          - mountPath: /secrets/git
            name: secrets-git
{{ if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 10 }}
{{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      - name: secrets-git
        secret:
          defaultMode: 420
          secretName: tekton-git
{{ if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 6 }}
{{ end }}
